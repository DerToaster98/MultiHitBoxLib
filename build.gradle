plugins {
    id 'net.minecraftforge.gradle' version "${forgegradle_version}"
    id 'org.spongepowered.mixin' version "${mixingradle_version}"
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'org.parchmentmc.librarian.forgegradle' version "${parchmentmc_version}"
    id 'me.modmuss50.mod-publish-plugin' version "${modmuss50_mod_publish_version}"
}

version = "${mc_version}-${mod_version}"
group = mod_group

base {
    archivesName = modid
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

jarJar.enable()

tasks.named('jarJar').configure {
	archiveClassifier = ''
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mappings_channel, version: mappings_version

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            //arg "--mixin.config=${modid}.mixins.json"
            //property 'mixin.env.remapRefMap', 'true'
            //property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            //jvmArgs "-XX:+AllowEnhancedClassRedefinition", "-XX:HotswapAgent=fatjar"
            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        client {
            taskName 'runClient MHLib 1.20.1'

            property 'forge.enabledGameTestNamespaces', modid
        }

        server {
            taskName 'runServer MHLib 1.20.1'

            property 'forge.enabledGameTestNamespaces', modid
        }
        gameTestServer {
            taskName 'runTestServer MHLib 1.20.1'

            property 'forge.enabledGameTestNamespaces', modid
        }

        data {
            workingDirectory project.file('run-data')

            taskName 'runData MHLib 1.20.1'

            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "CurseMaven Maven"
        url = "https://www.cursemaven.com"
    }

    maven {
        name = "AzureDoom Maven"
        url = "https://libs.azuredoom.com:4443/mods"
    }
	
    maven {
        name = "Geckolib Maven"
        url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven"
    }

	maven {
        name = "CubicInterpolation Maven"
        url = "https://cubicinterpolation.net/maven/"
    }
	
	maven {
		name = "Commoble Databuddy"
		url = "https://commoble.net/maven/"
	}

    maven {
        name = "BlameJared maven"
        url = "https://maven.blamejared.com/"
    }

    maven {
        name = "RyanLiptak Maven"
        url = "https://maven.ryanliptak.com/"
    }

    maven {
        name = 'Su5eD'
        url = 'https://maven.su5ed.dev/releases/'
    }

    maven {
        name = 'Fabric'
        url = 'https://maven.fabricmc.net/'
    }
}

dependencies {
    // Base
    minecraft("net.minecraftforge:forge:${mc_version}-${forge_version}")
    //annotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")
    annotationProcessor 'net.fabricmc:sponge-mixin:0.11.4+mixin.0.8.5'

    // Dependencies (Embedded)
    implementation fg.deobf("commoble.databuddy:${databuddy_branch}:${databuddy_version}")

    jarJar(group: 'commoble.databuddy', name: "${databuddy_branch}", version: "[${databuddy_version},)")

    // Dependencies (Optional)
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${geckolib_version}")

    implementation fg.deobf("mod.azure.azurelib:azurelib-neo-${azurelib_version}")

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")

    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    implementation fg.deobf("curse.maven:just-enough-effect-descriptions-jeed-532286:${jeed_version}")

    implementation fg.deobf("curse.maven:catalogue-459701:${catalogue_version}")
    implementation fg.deobf("curse.maven:gamemenumodoption-353051:${gmmo_version}")

    implementation fg.deobf("curse.maven:jade-324717:${jade_version}")

    //implementation fg.deobf("curse.maven:mixinbooster-980731:${mixinbooster_version}")
    implementation("org.sinytra.mixinbooster:mixin-booster:${mixinbooster_version}+${mc_version}")

    compileOnly fg.deobf("squeek.appleskin:appleskin-forge:${appleskin_version}:api")
    runtimeOnly fg.deobf("squeek.appleskin:appleskin-forge:${appleskin_version}")
}

jarJar.enable()

mixin {
    add sourceSets.main, "${modid}.refmap.json"
    config "${modid}.mixins.json"

    //reobfSrgFile = file("${buildDir}/fixMcpToSrg/output.tsrg")

    debug.verbose = true
    debug.export = true
    //debug = true
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            mc_version: mc_version, mc_version_range: mc_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version: loader_version, mod_loader: mod_loader,
            modid: modid, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_credits: mod_credits, mod_description: mod_description, mod_issueTrackerURL: mod_issueTrackerURL,
            geckolib_version_range: geckolib_version_range, azurelib_version_range: azurelib_version_range,
            jei_version_range: jei_version_range, jeed_version_range: jeed_version_range,
            catalogue_version_range: catalogue_version_range, gmmo_version_range: gmmo_version_range,
            mixinbooster_version_range: mixinbooster_version_range,
            mixinbooster_version: mixinbooster_version,
            jade_version_range: jade_version_range, appleskin_version_range: appleskin_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

java {
    withSourcesJar()
}

tasks.named('jar', Jar).configure {
	archiveClassifier = 'slim'
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_credits,
                'Specification-Version'   : mod_version,
                'Implementation-Title'    : mod_name,
                'Implementation-Version'  : mod_version,
                'Implementation-Vendor'   : mod_credits,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs'		  	  : "${modid}.mixins.json"
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

afterEvaluate {
    jar.finalizedBy reobfJar
    reobfJar.dependsOn 'addMixinsToJar'
}

// Delete slim jar
build.doLast {
	delete "${project.projectDir}/build/libs/${modid}-${mc_version}-${mod_version}-slim.jar"
}

if (file('key.properties').exists()) {
    publishMods {
        def releaseProp = new Properties()
        File secretPropsFile = file("key.properties")
        releaseProp.load(secretPropsFile.newInputStream())
        file = jar.archiveFile
        changelog = rootProject.file("changelog.md").text
        type = STABLE
        modLoaders.add("neoforge")
        modLoaders.add("forge")

        curseforge {
            projectId = project.curseforge_id
            projectSlug = project.mod_id
            accessToken = releaseProp.getProperty("curseKey")
            minecraftVersions.add(project.minecraft_version)
            optional {
                slug = "azurelib"
            }
            optional {
                slug = "geckolib"
            }
        }
        modrinth {
            projectId = project.modrinth_id
            accessToken = releaseProp.getProperty('modrinthKey')
            minecraftVersions.add(project.minecraft_version)
            optional {
                slug = "azurelib"
            }
            optional {
                slug = "geckolib"
            }
        }
    }
}