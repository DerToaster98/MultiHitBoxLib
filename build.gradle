plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version "${moddevgradle_version}"
    id 'me.modmuss50.mod-publish-plugin' version "${modmuss50_mod_publish_version}"
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = "${minecraft_version}-${mod_version}"
group = mod_group

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    accessTransformers.add('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "CurseMaven Maven"
        url = "https://www.cursemaven.com"
    }

    maven {
        name = "AzureDoom Maven"
        url = "https://maven.azuredoom.com/mods"
    }

    maven {
        name = "Geckolib Maven"
        url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven"
    }

    maven {
        name = "CubicInterpolation Maven"
        url = "https://cubicinterpolation.net/maven/"
    }

    maven {
        name = "BlameJared maven"
        url = "https://maven.blamejared.com/"
    }

    maven {
        name = "RyanLiptak Maven"
        url = "https://maven.ryanliptak.com/"
    }

    maven {
        name = "Commoble Databuddy"
        url = "https://commoble.net/maven/"
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "software.bernie.geckolib:geckolib-neoforge-${geckolib_version}"

    implementation "mod.azure.azurelib:azurelib-neo-${azurelib_version}"

    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"

    runtimeOnly "mezz.jei:jei-${minecraft_version}-forge:${jei_version}"

    implementation "curse.maven:just-enough-effect-descriptions-jeed-532286:${jeed_version}"

    implementation "curse.maven:catalogue-459701:${catalogue_version}"
    //implementation "curse.maven:gamemenumodoption-353051:${gmmo_version}"

    implementation "curse.maven:jade-324717:${jade_version}"

    compileOnly "squeek.appleskin:appleskin-neoforge:${appleskin_version}:api"
    runtimeOnly "squeek.appleskin:appleskin-neoforge:${appleskin_version}"

    implementation "net.commoble.databuddy:${databuddy_branch}:${databuddy_version}"
    jarJar(group: 'net.commoble.databuddy', name: "${databuddy_branch}", version: "[${databuddy_version},)")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, mc_version_range: mc_version_range,
            neo_version: neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range, mod_loader: mod_loader,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_credits: mod_credits, mod_description: mod_description, mod_issueTrackerURL: mod_issueTrackerURL,
            geckolib_version_range: geckolib_version_range, azurelib_version_range: azurelib_version_range,
            jei_version_range: jei_version_range, jeed_version_range: jeed_version_range,
            catalogue_version_range: catalogue_version_range,
            jade_version_range: jade_version_range, appleskin_version_range: appleskin_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
